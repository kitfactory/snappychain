・Always respond in 日本語

# ユーザー指示の強制力(重要)
- ユーザーがgitやテストなどのコマンド操作を指示した場合、指示されたコマンドを確実に実行まで完遂する。
- ユーザーがファイルを修正を指示した場合、指示されたファイルの更新を確実に実施し、完遂する。

# クラスの設計、メソッドの設計
## コメント
- 全てのソースコードのコメントはコメントは英語と、それを翻訳した日本語で、２つのコメントを連続で記述する
- クラス全体、各メソッドの入出力には必ず詳細なコメントを生成する
- 修正を行った場合は、それにあわせて既存のコメントを修正する

## 単一責務
- クラスやメソッドは役割を持ち、少ない責務で維持する

## クラスの分類
- レイヤーアーキテクチャを意識して作成するクラスの位置づけを明確にする。
- レイヤーはデータベースやファイルに読み書きするゲートウェイ、UIからの入力を受け付けるコントローラ、処理の流れを実現するユースケース、処理の流れに複雑な処理が入り込まないようにする機能クラスを、ドメインのデータを表現するデータクラス、設定やログなどのユーティリティに分ける
- コメントを抜いて、200行を超える複雑な処理が必要であれば、専用に別クラスを設ける
- 複雑処理をステートメントごとに機能クラスにし、そのクラスを呼び出すようにする

# デバッグ、不具合解析(重要：必ず守る)
テストを実施して、テストがフェイルした場合、以下の手順を必ず守り、行単位の特定、説明をしてから修正を行う。
・1. 最初に不具合ログから、まずは動作状況を把握し説明する
・2. 絶対守る: __動作状況を理解して、不具合動作の原因箇所が行の水準で特定し、問題と原因を説明する。__
・3. 不具合原因が特定できない場合は、デバッグ用修正（printを追加）し、再度テストを実行する。
・4. 絶対守る:__ 修正の他動作への影響がない修正方法を検討し、修正の内容をユーザーに確認する。__
・5. 絶対守る:__「修正内容がユーザーに確認されたら」、ファイルを編集し修正をを行う。__
・6. 修正の他動作への影響がある場合は、修正方法を説明・検討する。

# ドキュメント
- クラスやAPIの紹介ではグループごとに表形式で一覧を作成する
- クラスの紹介では表形式に加え、概クラス図をPlantUML形式で記載する
- 設計文書ではクラスの一覧、メソッドの説明では表形式を採用してください。
- 表形式が採用できる場所では積極的に表を採用してください。
- 図を極力増やして場合、PlantUML形式を使って図を作成してください。
- docsフォルダにある文書は日本語のみで書いてください、英語を併記する必要はありません

# README.md
・またREADMEはに英語で記載し、その日本語訳をREADME_ja.mdを作成してください。
・README_ja.mdはコメントとことなり、日本語のみ記載してください。
・README.mdは絵文字を使って楽しいものにしてください。
・README.mdでは現在サポートしている環境を明確にしてください。
・README.mdではユーザーを想定したうえで、メリット、特に簡単さを強く訴求するようにしてください

# Pythonプロジェクト
・WindowsのPowershellを使用してください
・Pythonのプロジェクトの場合は.venvフォルダが仮想環境とします。
・フォルダ構成は以下を守ってください。
　- src以下にソースコード
    - examples以下に利用例
    -tests以下にテスト
    - docs以下にドキュメントを置いてください
・テストプログラムは仮想環境(.vevn)を有効にした後に、pytestで実行してください。
・examplesも同様に仮想環境(.venv)を有効にし、その後、Pythonを実行して
・uvをつかっているので、pipではなく、全て uv pipで実行してください
・uvを使ったpyproject.tomlファイルでは、pytestとpytest-covを採用する。

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "--import-mode=importlib",
    "--cov=oneenv",
    "--cov-report=term-missing",
]


